//gpt
package cms;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

public class HSQLContent implements Persistencia<Content> {
    private Connection connection;
    private String dbUrl = "jdbc:hsqldb:file:meubanco;shutdown=true";

    public HSQLContent() throws SQLException {
        connection = DriverManager.getConnection(dbUrl);
        initializeDatabase();
        System.out.println("HSQL CRIADO");
    }

    private void initializeDatabase() throws SQLException {
        // Excluir a tabela se ela já existir
        String dropTable = "DROP TABLE IF EXISTS Content";
        try (PreparedStatement stmt = connection.prepareStatement(dropTable)) {
            stmt.executeUpdate();
        }

        // Criar a tabela com auto incremento
        String createTable = "CREATE TABLE IF NOT EXISTS Content (id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, titulo VARCHAR(255), texto VARCHAR(255))";
        try (PreparedStatement stmt = connection.prepareStatement(createTable)) {
            stmt.executeUpdate();
        }
    }

    
    @Override
    public void save(Content content) {
        String query = "INSERT INTO Content (titulo, texto) VALUES (?, ?)";
        try (PreparedStatement stmt = connection.prepareStatement(query, PreparedStatement.RETURN_GENERATED_KEYS)) {
            stmt.setString(1, content.getTitulo());
            stmt.setString(2, content.getTexto());
            stmt.executeUpdate();
            
            // Obter o ID gerado
            ResultSet generatedKeys = stmt.getGeneratedKeys();
            if (generatedKeys.next()) {
                content.setId(generatedKeys.getInt(1)); // Define o ID no objeto Content
            }
            
            System.out.println("Conteúdo salvo: ");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void update(Content content) {
        if (content.getId() == null) {
            System.out.println("Erro: O ID do conteúdo não pode ser nulo para atualização.");
            return;
        }

        String query = "UPDATE Content SET titulo = ?, texto = ? WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setString(1, content.getTitulo());
            stmt.setString(2, content.getTexto());
            stmt.setInt(3, content.getId());
            int rowsUpdated = stmt.executeUpdate();
            if (rowsUpdated > 0) {
                System.out.println("Conteúdo atualizado: " + content);
            } else {
                System.out.println("Conteúdo não encontrado para atualização.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void list() {
        String query = "SELECT * FROM Content";
        try (PreparedStatement stmt = connection.prepareStatement(query);
             ResultSet rs = stmt.executeQuery()) {
            if (!rs.next()) {
                System.out.println("Nenhum conteúdo disponível.");
                return;
            }
            do {
                System.out.println("ID: " + rs.getInt("id") + ", Título: " + rs.getString("titulo") + ", Descrição: " + rs.getString("texto")+ "HSQL");
            } while (rs.next());
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public boolean remove(int id) {
        String query = "DELETE FROM Content WHERE id = ?";
        try (PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setInt(1, id);
            int rowsDeleted = stmt.executeUpdate();
            if (rowsDeleted > 0) {
                System.out.println("Conteúdo removido com ID: " + id);
                return true;
            } else {
                System.out.println("Conteúdo não encontrado para remoção.");
                return false;
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    
    public void close() {
        try {
            if (connection != null && !connection.isClosed()) {
                connection.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

